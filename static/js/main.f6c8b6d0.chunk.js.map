{"version":3,"sources":["img/bg.png","components/styles/StyledTetris.js","tetrominos.js","gameHelpers.js","hooks/usePlayer.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","gameOverText.js","components/Tetris.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","length","createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","pos","usePlayer","useState","collided","setPlayer","rotate","matrix","clockwise","transposedMatrix","map","_","index","col","row","reverse","resetPlayer","useCallback","STAGE_WIDTH","prev","clonedPlayer","JSON","parse","stringify","console","log","offset","useStage","setStage","rowsClear","setRowsClear","useEffect","updateStage","prevStage","newStage","cell","forEach","value","reduce","accumulator","findIndex","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","QUOTES","randomQuotes","randIndex","Tetris","dropTime","setDroptime","setGameOver","updatePlayerPos","playerRotate","rowsCleared","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","dir","drop","move","keyCode","pushToBottom","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6c8b6d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2810fe6b.png\";","import styled from 'styled-components';\n\nimport bgImage from '../../img/bg.png';\n\nexport const StyledTetrisWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  background: url(${bgImage}) #000;\n  background-size: cover;\n  overflow: hidden; \n`\nexport const StyledTetris = styled.div`\n  display: flex;\n  align-items: flex-start;\n  padding: 40px;\n  margin: 0 auto;\n  max-width: 900px;\n\n  aside {\n    width: 100%;\n    max-width: 200px;\n    display: block;\n    padding: 0 20px;\n  }\n`","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0,0,0'},\n  I: { \n    shape: [\n              [0, 'I', 0, 0],\n              [0, 'I', 0, 0],\n              [0, 'I', 0, 0],\n              [0, 'I', 0, 0]\n            ], \n    color: '123,20,50'\n  },\n  J: {\n    shape: [\n      [0,   'J', 0],\n      [0,   'J', 0],\n      ['J', 'J', 0],\n    ], \n    color: '34,124,63'\n  },\n  L: {\n    shape: [\n      [0, 'L',  0],\n      [0, 'L',  0],\n      [0, 'L', 'L'],\n    ], \n    color: '34,20,163'\n  },\n  O: {\n    shape: [\n      ['O', 'O'],\n      ['O', 'O']\n    ], \n    color: '34,200,200'\n  },\n  S: {\n    shape: [\n      [0,   'S', 'S'],\n      ['S', 'S',  0],\n      [0,    0 ,  0],\n    ], \n    color: '134,10,103'\n  },\n  T: {\n    shape: [\n      ['T', 'T', 'T'],\n      [0,   'T',  0],\n      [0,    0,   0]\n    ], \n    color: '100,100,100'\n  },\n  Z: {\n    shape: [\n      ['Z', 'Z',  0],\n      [0,   'Z', 'Z'],\n      [0,    0 ,  0],\n    ], \n    color: '123,123,63'\n  },\n}\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino = \n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n}","export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () => \n  Array.from(Array(STAGE_HEIGHT), () => \n    new Array(STAGE_WIDTH).fill([0, 'clear']) // [type, key]\n  )\n\nexport const checkCollision = (player, stage, {x: moveX, y: moveY}) => {\n  for(let y = 0; y < player.tetromino.length; y++) {\n    for(let x = 0; x < player.tetromino[y].length; x++) {\n      // 1. check that we're on an actual tetro cell\n      if(player.tetromino[y][x] !== 0) {\n        if(\n          // 2. Check that our move is inside the game areas height (y)\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that cell we're moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !== 'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n}","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_HEIGHT, STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  // destructuring and initialize init state\n  const [player, setPlayer] = useState({\n    pos: {x: 0, y: 0},\n    tetromino: TETROMINOS[0].shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({x , y, collided}) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\n      collided\n    }))\n  }\n\n  const rotate = (matrix, clockwise) => {\n    // make the row become column (transpose)\n    const transposedMatrix = matrix.map((_, index) => \n      matrix.map(col => col[index])\n    )\n    // Reverse each row\n    if (clockwise > 0) \n      return transposedMatrix.map(row => row.reverse());\n    else return transposedMatrix.reverse();\n  }\n\n  const playerRotate = (stage, clockwise) => {\n    // deep copy\n    const clonedPlayer = JSON.parse(JSON.stringify(player)); \n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, clockwise);\n    // check collision of rotated player\n    const pos = clonedPlayer.pos.x;\n    console.log('original clonedPlayer.pos.x', clonedPlayer.pos.x);\n    let offset = 1;\n    // find the offset to put the player when it collides\n    while(checkCollision(clonedPlayer, stage, {x: 0, y: 0})) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      console.log('clonedPlayer.pos.x', clonedPlayer.pos.x);\n      // when offset is larger than the tetromino array size\n      // don't place it (that will be too far), give up rotate.. \n      // or you might get stuck in infinity loops\n      if(offset > clonedPlayer.tetromino[0].length) {\n        // reset player\n        rotate(clonedPlayer.tetromino, -clockwise);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n\n    setPlayer(clonedPlayer);\n  }\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {x: STAGE_WIDTH / 2 - 2, y: 0 }, // in the middle\n      tetromino: randomTetromino().shape,\n      collided: false\n    })\n  }, [])\n  \n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\nimport { log } from 'util';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsClear, setRowsClear] = useState(0);\n\n  useEffect(() => {\n    setRowsClear(0);\n    const sweepRows = newStage => \n      newStage.reduce((accumulator, row) => {\n        // all cell on the row is filled\n        if(row.findIndex(cell => cell[0] === 0) === -1 ) {\n          console.log('suspected sweep');\n          \n          setRowsClear(prev => prev + 1);\n          // create fresh new rows on the top of the stage\n          // unshift add new element to the beginning of the array\n          accumulator.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return accumulator;\n        }\n        // returns the row as it is\n        accumulator.push(row);\n        return accumulator;\n      }, [])\n    \n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row => \n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if(value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value, \n              `${player.collided? 'merged' : 'clear'}`]\n          }\n        }) \n      })\n      // Then check if collided\n      if(player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    }\n\n    setStage(prev => updateStage(prev))\n\n  }, [player, resetPlayer])\n\n  return [stage, setStage, rowsClear];\n}","import styled from 'styled-components';\n\nexport const StyledStage = styled.div`\n  display: grid;\n  grid-template-rows: repeat(\n    ${props => props.height},\n    calc(25vw / ${props => props.width})\n  );\n  grid-template-columns: repeat(${props => props.width}, 1fr);\n  grid-gap: 1px;\n  border: 2px solid #333;\n  width: 100%;\n  max-width: 25vw;\n  background: #111;\n`;","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n  border-right-color: rgba(${props => props.color}, 1);\n  \n`","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos'\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n);\n\nexport default React.memo(Cell);","import React from 'react';\nimport { StyledStage } from './styles/StyledStage'\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    { stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />)) }\n  </StyledStage>\n)\n\nexport default Stage;","import styled from 'styled-components';\n\nexport const StyledDisplay = styled.div`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center; \n  margin: 0 0 20px 0;\n  padding: 20px;\n  border: 4px solid #333;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  color: ${props => (props.gameOver ? 'red' : '#999')};\n  background: #000;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: ${props => (props.gameOver ? '1.2rem' : '0.8rem')};\n`;","import React from 'react';\nimport { StyledDisplay } from './styles/StyledDisplay';\n\nconst Display = ({ gameOver, text}) => (\n  <StyledDisplay gameOver={gameOver}>{ text }</StyledDisplay>\n)\n\nexport default Display;","import styled from 'styled-components';\n\nexport const StyledStartButton = styled.button`\n  box-sizing: border-box;\n  margin: 0 0 20px 0;\n  padding: 20px;\n  min-height: 30px;\n  width: 100%;\n  border-radius: 20px;\n  border: none;\n  color: white;\n  background: #333;\n  font-family: Pixel, Arial, Helvetica, sans-serif;\n  font-size: 1rem;\n  outline: none;\n  cursor: pointer;\n`","import React from 'react';\nimport { StyledStartButton } from './styles/StyledStartButton';\n\nconst StartButton = ({ callback }) => (\n  <StyledStartButton onClick={ callback }>Start Game</StyledStartButton>\n)\n\nexport default StartButton;","export const QUOTES = [\n  'Losing is not a big deal',\n  'Everything is gonna be okay',\n  'You will eventually lose',\n  'HA!',\n  'You are the best',\n  'You might lose at this game, but you have a successful life',\n  'I\\'m a bad guy, duh!',\n  'You did great',\n  'Nice try'\n]\n\nexport const randomQuotes = () => {\n  const randIndex = Math.floor(Math.random() * QUOTES.length);\n  return QUOTES[randIndex];\n}","import React, { useState } from 'react';\n\n// Styled Components\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris'\n\n// Customized Hooks\nimport { useInterval } from '../hooks/useInterval';\nimport { usePlayer } from '../hooks/usePlayer';\nimport { useStage } from '../hooks/useStage';\nimport { useGameStatus } from '../hooks/useGameStatus';\n\n// Components\nimport Stage from './Stage';\nimport Display from './Display';\nimport StartButton from './StartButton';\nimport { createStage, checkCollision } from '../gameHelpers';\n\nimport { randomQuotes } from '../gameOverText';\n\n\nconst Tetris = () => {\n  const [dropTime, setDroptime] = useState(null);\n  const [gameOver, setGameOver] = useState(false);\n\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n  console.log('re-render');\n\n  const movePlayer = dir => {\n    if ( !checkCollision(player, stage, {x: dir, y: 0}) ) \n      updatePlayerPos({ x: dir, y: 0});\n  }\n\n  const startGame = () => {\n    // Reset everything\n    setStage(createStage());\n    setDroptime(1000);\n    resetPlayer();\n    setGameOver(false);\n    setScore(0);\n    setRows(0);\n    setLevel(0);\n  }\n\n  const drop = () => {\n    // increase the level when the user has cleared 10 rows\n    if (rows > (level + 1) * 10 ) {\n      setLevel(prev => prev + 1);\n      // Also increase speed\n      setDroptime(1000 / (level + 1) + 200 );\n    }\n\n    if ( !checkCollision(player, stage, {x: 0, y: 1}) ) {\n      updatePlayerPos({ x: 0, y: 1, collided: false });\n    } else {\n      // Game over\n      if(player.pos.y < 1) {\n        console.log('Game Over');\n        setGameOver(true);\n        setDroptime(null);\n      }\n\n      updatePlayerPos({ x: 0, y: 0, collided: true });\n    }\n  }\n\n  const pushToBottom = () => {\n    let offset = 1;\n    while(!checkCollision(player, stage, {x: 0, y: offset})) {\n      offset += 1;\n    }\n    updatePlayerPos({ x: 0, y: offset - 1, collided: false });\n    // BUG if you hit it too fast the block will disappear\n  }\n\n  const keyUp = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 40) { // down\n        setDroptime(1000 / (level + 1) + 200);\n      }\n    }\n  }\n  \n  const dropPlayer = () => {\n    setDroptime(null);\n    drop();\n  }\n\n  const move = ({ keyCode }) => {\n    if (!gameOver) {\n      if (keyCode === 37) { // left\n        movePlayer(-1);\n      } else if (keyCode === 39) { // right\n        movePlayer(1);\n      } else if (keyCode === 40) { // down\n        dropPlayer();\n      } else if (keyCode === 38) { // up\n        playerRotate(stage, 1);\n      } else if (keyCode === 32 ) { // white space\n        pushToBottom();\n      }\n    }\n  }\n\n  useInterval(() => {\n    drop();\n  }, dropTime);\n  \n  return (\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\n      <StyledTetris>\n        <Stage stage={ stage }/>\n        <aside>\n          {gameOver ? (\n            <Display gameOver={gameOver} text={randomQuotes()} /> \n            ) : (\n            <div>\n            <Display text={`Score: ${score}`} />\n            <Display text={`Rows: ${rows}`} />\n            <Display text={`Level: ${level}`} />\n          </div>\n          )}\n          <StartButton callback={startGame}/>\n        </aside>\n      </StyledTetris>\n    </StyledTetrisWrapper>\n  )\n}\n\nexport default Tetris;","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n  const [score ,setScore] = useState(0);\n  const [rows ,setRows] = useState(0);\n  const [level ,setLevel] = useState(0);\n\n  const linePoints = [40, 100, 300, 1200];\n\n  const calcScore = useCallback(() => {\n    // We have score\n    if(rowsCleared > 0) {\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level - 1));\n      setRows(prev => prev + rowsCleared);\n    }\n  }, [level, linePoints, rowsCleared]);\n\n  useEffect(() => {\n    calcScore();\n  }, [calcScore, rowsCleared, score]);\n\n  return [score, setScore, rows, setRows, level, setLevel];\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}